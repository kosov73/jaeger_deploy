### Выбор устанавливаемых БД.
global:
  postgresql:
    ## Установка postgres
    enabled: true
  mongodb:
    ## Установка mongoDB
    enabled: true
  redis:
    ## Установка redis
    enabled: true
  rabbitmq:
    ## Установка rabbitmq
    enabled: true
  minio:
    ## Установка minio для S3 хранилища.
    enabled: true
  elasticsearch:
    ## Установка Elasticsearch (Включается для ELMA Bot)
    enabled: false
### Настройки БД postgres
postgresql:
  auth:
    ## название БД
    database: elma365
    ## пользователь
    username: postgres
    ## пароль БД Postgres
    postgresPassword: pgpassword
    replicationUsername: repl_user
    replicationPassword: repl_password
    enablePostgresUser: true
    password: pgpassword
  primary:
    persistence:
      ## размер хранилища данных (PVC)
      size: 100Gi
      ## если не определено, используется StorageClass по умолчанию
      #      storageClass: "-"

      enabled: true
    extendedConfiguration: |
      max_connections = 2000
      max_locks_per_transaction = 512
    ## Включение контейнера инициализации, который изменяет владельца и группу точки монтирования тома на `RunAsUser:fsGroup

    initdb:
      args: "--data-checksums"
      scripts:
        00_init_extensions.sql: |
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  volumePermissions:
    enabled: true
  fullnameOverride: postgres
  image:
    tag: 13.7.0
## адрес и секрет для приватного registry образов контейнера инициализации
#    image:
#      registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#      pullSecrets:
#        - myRegistryKeySecretName
## cluster Mode - раскомментируйте следующие строки
#  architecture: replication
#  readReplicas:
#    replicaCount: 2
#  replication:
#    synchronousCommit: 'on'
#    numSynchronousReplicas: 1
#    applicationName: replication
## адрес и секрет для приватного registry
#  image:
#    registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#    pullSecrets:
#      - myRegistryKeySecretName
##
### Настройки MongoDB
mongodb:
  auth:
    ## пользователь
    username: elma365
    ## название БД
    database: elma365
    ## пароль БД
    password: mongopassword
    ## root пароль БД
    rootPassword: mongorootpassword
    replicaSetKey: replicapassword
  persistence:
    ## размер хранилища данных (PVC)
    size: 20Gi
    ## если не определено, используется StorageClass по умолчанию
    #    storageClass: "-"
    ## Включение контейнера инициализации, который изменяет владельца и группу точки монтирования тома на `RunAsUser:fsGroup

    enabled: true
  volumePermissions:
    enabled: true
  fullnameOverride: mongo
  image:
    tag: 5.0.10
  architecture: replicaset
  replicaCount: 1
  arbiter:
    enabled: false
    podAnnotations:
      linkerd.io/inject: disabled
  service:
    portName: mongo
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 40
    timeoutSeconds: 20
    failureThreshold: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1
  podAnnotations:
    linkerd.io/inject: disabled
## адрес и секрет для приватного registry образов контейнера инициализации
#    image:
#      registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#      pullSecrets:
#        - myRegistryKeySecretName
## cluster Mode - раскомментируйте следующие строки
#  architecture: replicaset
#  replicaCount: 3
## адрес и секрет для приватного registry
#  image:
#    registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#    pullSecrets:
#      - myRegistryKeySecretName
##
### Настройки rabbitMQ
rabbitmq:
  auth:
    ## пользователь
    username: elma365
    ## vhost
    vhost: elma365
    ## пароль
    password: rmqpassword
    erlangCookie: zk8Jdo2Kzz4ql
  persistence:
    ## размер хранилища данных (PVC)
    size: 5Gi
    ## если не определено, используется StorageClass по умолчанию
    #    storageClass: "-"
    ## Включение контейнера инициализации, который изменяет владельца и группу точки монтирования тома на `RunAsUser:fsGroup

    enabled: true
  volumePermissions:
    enabled: true
  fullnameOverride: rabbitmq
  image:
    tag: 3.10.7
  loadDefinition:
    enabled: false
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 30
    failureThreshold: 10
    successThreshold: 1
  podAnnotations:
    linkerd.io/inject: disabled
  extraConfiguration: |-
    default_vhost = elma365
    default_permissions.configure = .*
    default_permissions.read = .*
    default_permissions.write = .*
  extraPlugins: >-
    rabbitmq_auth_backend_ldap
## адрес и секрет для приватного registry образов контейнера инициализации
#    image:
#      registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#      pullSecrets:
#        - myRegistryKeySecretName
## cluster Mode - раскомментируйте следующие строки
#  replicaCount: 3
## адрес и секрет для приватного registry
#  image:
#    registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#    pullSecrets:
#      - myRegistryKeySecretName
##
### Настройки Redis
redis:
  master:
    persistence:
      ## размер хранилища данных (PVC)
      size: 10Gi
      ## если не определено, используется StorageClass по умолчанию
      #      storageClass: "-"
    extraFlags:
      - "--maxmemory-policy allkeys-lfu"
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  replica:
    persistence:
      ## размер хранилища данных (PVC)
      size: 10Gi
      ## Включение контейнера инициализации, который изменяет владельца и группу точки монтирования тома на `RunAsUser:fsGroup
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  volumePermissions:
    enabled: true
    ## адрес и секрет для приватного registry образов контейнера инициализации
    #    image:
    #      registry: registry.example.com
    ## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
    #      pullSecrets:
    #        - myRegistryKeySecretName
  commonConfiguration: |-
    maxclients 20000
  fullnameOverride: redis
  image:
    tag: 6.2.7
  commonLabels:
    app: redis
  architecture: standalone
  auth:
    enabled: false
## cluster Mode - раскомментируйте следующие строки
#    replicaCount: 3
#  architecture: replication
#  sentinel:
#    enabled: true
#    quorum: 2
## адрес и секрет для приватного registry
#  image:
#    registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#    pullSecrets:
#      - myRegistryKeySecretName
##
### Настройки minio (S3 хранилище)
minio:
  auth:
    rootUser: "PZSF73JG72Ksd955JKU1HIA"
    rootPassword: "aFDkj28Jbs2JKbnvJH678MNwiz88zKjsuNBHHs"
    ## бакет ELMA365
  defaultBuckets: s3elma365
  ## дополнительные бакеты включаются для ELMA365 + ELMA Bot
  #  defaultBuckets: s3elma365,s3elmabot,elmabot-static-files,elmabot-temporary-files
  apiIngress:
    extraHosts:
      - path: /s3elma365
        ## включение host в ingress (необходимо указать для TLS)
        ## для приложения включите hostEnabled в файле values-elma365.yaml
        #        name: example.ru
        ## TLS настройки minio
        #    extraTls:
        #      - hosts:
        #          - example.ru
        #        secretName: "elma365-onpremise-tls"

        name: ""
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
  persistence:
    ## размер хранилища данных (PVC)
    size: 100Gi
    ## если не определено, используется StorageClass по умолчанию
    #    storageClass: ""
    ## Включение контейнера инициализации, который изменяет владельца и группу точки монтирования тома на `RunAsUser:fsGroup

    enabled: true
  volumePermissions:
    enabled: true
    ## адрес и секрет для приватного registry образов контейнера инициализации
    #    image:
    #      registry: registry.example.com
    ## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
    #      pullSecrets:
    #        - myRegistryKeySecretName
    ## включить проксирование подключения к внешнему S3, если сервер S3 изолирован в локальной сети
    ## в файле values-elma365.yaml в параметре db.s3.backend.address необходимо
    ## вместо адреса s3 указать хост по которому доступна система
    #  fullnameOverride: "miniogateway"
    #  persistence:
    #    enabled: false
  gateway:
    enabled: false
    auth:
      s3:
        accessKey: "PZSF73JG72Ksd955JKU1HIA"
        secretKey: "aFDkj28Jbs2JKbnvJH678MNwiz88zKjsuNBHHs"
        serviceEndpoint: "http://example.ru:9000"
    replicaCount: 1
  fullnameOverride: minio
  image:
    tag: 2022.8.8
  commonLabels:
    app: minio
  serviceAccount:
    create: false
  service:
    ports:
      api: 80
  resources:
    limits: {}
    requests: {}
  podAnnotations:
    linkerd.io/inject: disabled
## адрес и секрет для приватного registry
#  image:
#    registry: registry.example.com
## секрет с правами доступа к приватному registry должен быть создан вручную, зашифрованный в Base64
#    pullSecrets:
#      - myRegistryKeySecretName
##
### Настройки Elasticsearch (Включается для ELMA Bot)
elasticsearch:
  replicas: 1
  minimumMasterNodes: 1
  volumeClaimTemplate:
    accessModes: ["ReadWriteOnce"]
    resources:
      requests:
        storage: 50Gi
  fullnameOverride: "elasticsearch"
  image: "hub.elma365.tech/elma365/onpremise/elma-assistant/elasticsearch"
  imageTag: "7.9.3"
  imagePullPolicy: "IfNotPresent"
  imagePullSecrets:
    - name: yandexsecret-dbs

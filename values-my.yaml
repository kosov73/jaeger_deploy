crdOverrides:
  servicemonitors.monitoring.coreos.com:
    skip: true
  podmonitors.monitoring.coreos.com:
    skip: false
global:
## домен (FQDN) или ip адрес, по которому будет доступна система
  host: 'office.hatsuhana.ru'
  ingress:
## включение host в ingress (значение берется из host)
## для установленного s3 minio через чарты elma365-dbs, укажите в блоке minio
## значение в параметре hosts в файле values-dbs.yaml
    hostEnabled: false
    onpremiseTls:
## включение https
      enabled: false
## имя секрета с сертификатами для работы https
      secret: "elma365-onpremise-tls"
## включение сертификата корневого CA для работы https с самоподписанным сертификатом
      enabledCA: false
## имя конфигмапы с сертификатом корневого CA для работы https с самоподписанным сертификатом
      configCA: "elma365-onpremise-ca"
    annotations:
## для ingress-nginx версии выше 1.0 используется public
      kubernetes.io/ingress.class: nginx
## переопределить версию Kubernetes
  kubeVersion: ""
## включение поддержки HAProxy Ingress для работы на платформе OpenShift
  openshift: false
  machineId: /etc/machine-id
## включить дашборды для grafana
  monitoring:
    enabled: true
    metrics:
      enabled: true
      all: false
    provisioner: "k8s"
    dashboard:
      enabled: true
    alerts:
      enabled: false
## автомасштабирование сервисов
  autoscaling:
    enabled: false
## минимальное и максимальное количество реплик
    minReplicas: 1
    maxReplicas: 9
## адрес и секрет для приватного registry
#    image:
#      repository: registry.example.com
#      dockerRegistry: registry.example.com
## секрет с правами доступа к приватному registry, должен быть создан вручную, зашифрованный в Base64
#      pullSecret:
#        - myRegistryKeySecretName
##
## дополнительные параметры
  postgres:
    maxIdleConns: 10
    maxOpenConns: 150
    maxConnLife: 1m
    poolMaxIdleConns: 10
    poolMaxOpenConns: 150
    poolConnMaxLifetime: 5m
  maxGrpcMessageSize: "8388608"
  maxGrpcBackoffDelay: 2s
  activeDeadlineSeconds: 3000
##
## включить режим отладки платформы
debug: false
##
bootstrapCompany:
## эл. почта администратора
  email: "admin@mail.com"
## пароль администратора
  password: "test"
## язык установленной системы, возможные варианты: "ru-RU", "en-US", "sk-SK"
  locale: "ru-RU"
##
language:
## язык установленной системы, возможные варианты: "ru-RU", "en-US", "sk-SK"
  default: "ru-RU"
##
  
##
## настройки для подключения к SMTP серверу отправки почты
mailer:
  smtp:
## адрес SMTP-сервера, например "smtp.example.ru"
    host: ""
## порт, который слушает SMTPсервер, например 25, или 485, или 587
    port: ""
# адрес отправителя электронной почты, например "CompanyName <noreply@example.ru>"
    from: ""
## пользователь для авторизации на SMTP сервере, например "noreply@example.ru" или "noreply"
    user: ""
## пароль для авторизации на SMTP сервере
    password: ""
## используется ли шифрование (true - если да, false - если нет)
    needTLS: false
##
## включение флагов
settings:
  appconfig:
    onPremiseEnabledFeatureFlags:
      - extensionEventHandling
      - processEventHandling
      - delegatedEventHandling
      - appItemViewEventEnabled
      - fileDownloadEventEnabled
      - filePreviewEventEnabled
      - enableModuleServices
      - allowAttachWidgetFiles
      - allowPortal
      - allowPortalPageTemplates
      - useLegacyNodeVM
      - allowServerScriptsImport
      - allowImportPortalUsersForAD
      - allowImportPortalUsersForLDAP
      - allowAuthPortalUsersWithSAML
      - allowPortalLicensing
      - allowEntityLocalization
      - allowTodolist
      - enableDuplicateFTS
## Настраивается для ELMA Bot
#        - allowLinesBots
#  hydra-adaptor:
#    appconfig:
#      client_id: elma.assistant.clients.external.elma365.server
#      client_secret: wvmtLu1KAvf8XjtULBFJ3DP0eB
#      hydraAdminURL: http://hydra-admin:4445
#      loginEndpoint: "https://{{ .Values.global.host }}/ext-api/oidc-adaptor/login"
#  elmabot-proxy:
#    appconfig:
#      apiUrl: "https://elma365.{{ .Values.global.host }}"
#      grantType: elma.assistant.auth.grants.impersonation.elma365
#      identityServerUrl: https://auth.{{ .Values.global.host }}
#      oidcUri: "{{ .Values.global.host }}"
#      scope: elma.assistant.scopes.api.gateways.elma365 elma.assistant.scopes.auth.impersonation
